from falcor import *

def render_graph_R():
    g = RenderGraph('ReSTIR GI with NRD')
    GBufferRT = createPass('GBufferRT', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': TexLODMode.Mip0, 'useTraceRayInline': False, 'useDOF': True})
    g.addPass(GBufferRT, 'GBufferRT')
    ReSTIRGIPass = createPass('ReSTIRGIPass', {'secondaryRayLaunchProbability': 0.200, 'russianRouletteProbability': 0.30, 'useImportanceSampling': True, 'useInfiniteBounces': False, 'maxBounce': 10, 'analyticOnly': True, 'harfResolution':False,'useTemporalResampling': True, 'temporalReservoirSize': 20, 'useSpatialResampling': True, 'spatialReservoirSize': 100, 'spatialResamplingRadius': 150, 'spatialNeighborsCount': 4, 'doVisibilityTestEachSamples': False, 'evalDirectLighting': True, 'showVisibilityPointLi': False, 'splitView': False})
    g.addPass(ReSTIRGIPass, 'ReSTIRGIPass')
    ReSTIRDIPass = createPass('ReSTIRDIPass', {'temporalReuseMaxM': 20, 'risSampleNums': 8, 'autoSetMaxM': True, 'useReSTIR': True, 'useTemporalReuse': True, 'useSpatialReuse': False, 'spatialRadius': 5, 'spatialNeighbors': 4})
    g.addPass(ReSTIRDIPass, 'ReSTIRDIPass')
    NRD = createPass('NRD', {'enabled': True, 'method': NRDMethod.RelaxDiffuseSpecular, 'outputSize': IOSize.Default, 'worldSpaceMotion': True, 'disocclusionThreshold': 2.0, 'maxIntensity': 1000.0, 'diffusePrepassBlurRadius': 16.0, 'specularPrepassBlurRadius': 16.0, 'diffuseMaxAccumulatedFrameNum': 31, 'specularMaxAccumulatedFrameNum': 31, 'diffuseMaxFastAccumulatedFrameNum': 2, 'specularMaxFastAccumulatedFrameNum': 2, 'diffusePhiLuminance': 2.0, 'specularPhiLuminance': 1.0, 'diffuseLobeAngleFraction': 0.800000011920929, 'specularLobeAngleFraction': 0.8999999761581421, 'roughnessFraction': 0.5, 'diffuseHistoryRejectionNormalThreshold': 0.0, 'specularVarianceBoost': 1.0, 'specularLobeAngleSlack': 10.0, 'disocclusionFixEdgeStoppingNormalPower': 8.0, 'disocclusionFixMaxRadius': 32.0, 'disocclusionFixNumFramesToFix': 4, 'historyClampingColorBoxSigmaScale': 2.0, 'spatialVarianceEstimationHistoryThreshold': 4, 'atrousIterationNum': 6, 'minLuminanceWeight': 0.0, 'depthThreshold': 0.019999999552965164, 'luminanceEdgeStoppingRelaxation': 0.5, 'normalEdgeStoppingRelaxation': 0.30000001192092896, 'roughnessEdgeStoppingRelaxation': 0.30000001192092896, 'enableAntiFirefly': False, 'enableReprojectionTestSkippingWithoutMotion': False, 'enableSpecularVirtualHistoryClamping': False, 'enableRoughnessEdgeStopping': False, 'enableMaterialTestForDiffuse': False, 'enableMaterialTestForSpecular': False})
    g.addPass(NRD, 'NRD')
    ToneMapper = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapper, 'ToneMapper')
    ModulateIllumination = createPass('ModulateIllumination', {'useEmission': True, 'useDiffuseReflectance': True, 'useDiffuseRadiance': True, 'useSpecularReflectance': True, 'useSpecularRadiance': True, 'useDeltaReflectionEmission': False, 'useDeltaReflectionReflectance': False, 'useDeltaReflectionRadiance': False, 'useDeltaTransmissionEmission': False, 'useDeltaTransmissionReflectance': False, 'useDeltaTransmissionRadiance': False, 'useResidualRadiance': False, 'outputSize': IOSize.Default})
    g.addPass(ModulateIllumination, 'ModulateIllumination')
    # g.addEdge('ImageLoader.dst', 'ReSTIRGIPass.noiseTex')
    g.addEdge('ReSTIRDIPass.specularReflectance', 'ReSTIRGIPass.specularReflectance')
    g.addEdge('ReSTIRDIPass.diffuseReflectance', 'ReSTIRGIPass.diffuseReflectance')
    g.addEdge('ReSTIRDIPass.color', 'ReSTIRGIPass.directLighting')
    g.addEdge('GBufferRT.vbuffer', 'ReSTIRDIPass.vBuffer')
    g.addEdge('GBufferRT.vbuffer', 'ReSTIRGIPass.vBuffer')
    g.addEdge('GBufferRT.depth', 'ReSTIRGIPass.depth')
    g.addEdge('GBufferRT.depth', 'ReSTIRDIPass.depth')
    g.addEdge('GBufferRT.viewW', 'ReSTIRDIPass.viewW')
    g.addEdge('GBufferRT.normW', 'ReSTIRDIPass.normal')
    g.addEdge('GBufferRT.mvec', 'ReSTIRDIPass.motionVecW')
    g.addEdge('GBufferRT.mvec', 'ReSTIRGIPass.motionVector')
    g.addEdge('GBufferRT.mvec', 'NRD.mvec')
    g.addEdge('GBufferRT.linearZ', 'NRD.viewZ')
    g.addEdge('GBufferRT.normWRoughnessMaterialID', 'NRD.normWRoughnessMaterialID')
    g.addEdge('ReSTIRGIPass.diffuseRadianceHitDist', 'NRD.diffuseRadianceHitDist')
    g.addEdge('ReSTIRGIPass.specularRadianceHitDist', 'NRD.specularRadianceHitDist')
    g.addEdge('ReSTIRGIPass.environment', 'ModulateIllumination.emission')
    g.addEdge('ModulateIllumination.output', 'ToneMapper.src')
    g.addEdge('NRD.filteredDiffuseRadianceHitDist', 'ModulateIllumination.diffuseRadiance')
    g.addEdge('NRD.filteredSpecularRadianceHitDist', 'ModulateIllumination.specularRadiance')
    g.addEdge('ReSTIRGIPass.diffuseReflectance', 'ModulateIllumination.diffuseReflectance')
    g.addEdge('ReSTIRGIPass.specularReflectance', 'ModulateIllumination.specularReflectance')
    g.markOutput('ToneMapper.dst')
    return g

R = render_graph_R()
try: m.addGraph(R)
except NameError: None
